package templates

const (
	TS_MODEL_TEMPLATE = `
// This file was auto-generated by fabric. Delete this comment if the file is already checked and OK.
// Models need to extend an entity. Create a model first to import the entity.

export interface ValidationResult {
	isValid: boolean;
	errors: string[];
}

export class {{.Name | title}}Model {
	private readonly _entity: {{.Name | title}};
	constructor(data: {{.Name | title}}Data) {
		this._entity = {{.Name | title}}.create(data);
	}

	get uid(): string { return this._entity.uid; }
	{{range .Params}}get {{.Name}}(): {{.ParamType}} {{if .Optional}}| undefined{{end}} { return this._entity.{{.Name}}; }
	{{end}}

	static create(data: {{.Name | title}}Data): {{.Name | title}}Model {
		return new {{.Name | title}}Model(data);
	}

	static fromJson(json: string): {{.Name | title}}Model {
		try {
			const rawData = JSON.parse(json);
			const data = {{.Name | title}}Model._transformFromJson(rawData);
			return {{.Name | title}}Model.create(data);
		} catch (err) {
			// TODO: Improve error handling.
			throw new Error("Parsing JSON Error");
		}
	}

	static fromEntity(entity: {{.Name | title}}): {{.Name | title}}Model {
		return new {{.Name | title}}Model(entity.toPlainObject());
	}

	toPlainObject(): {{.Name | title}}Data & { uid: string } {
		return this._entity.toPlainObject();
	}

	toJson(): string {
	  const jsonData = this._transformToJson(this.toPlainObject());
		return JSON.stringify(jsonData);
	}

	toEntity(): {{.Name | title}} {
		return this._entity;
	}

	update(changes: Partial<{{.Name | title}}Data>): {{.Name | title}}Model {
		const updatedEntity = this._entity.update(changes);
		return {{ .Name | title }}Model.fromEntity(updatedEntity);
	}

	equals(other: {{.Name | title}}Model): boolean {
		return other && this.uid === other.uid;	
	}

	clone(): {{.Name | title}}Model {
		return {{.Name | title}}Model.create({ 
			...this.toPlainObject(), 
			uid: crypto.randomUUID() 
		});
	}

	validate(): ValidationResult {
		const errors: string[] = [];

		{{range .Params}}{{if not .Optional}}// Validate required field: {{.Name | title}}
		if (this.{{.Name}} === undefined || this.{{.Name}} === null) {
			errors.push('{{.Name | title}} is required');
		}{{end}}{{end}}

		// Add custom validation logic here
		// Example:
		// if (typeof this.{{(index .Params 0).Name}} === 'string' && this.{{(index .Params 0).Name}}.length < 3) {
		//     errors.push('{{(index .Params 0).Name}} must be at least 3 characters long');
		// }

		return {
			isValid: errors.length === 0,
			errors
		};
	}

	private static _transformFromJson(rawData: any): {{.Name | title}}Data {
		return {
			// TODO: Check the types on this FromJson transformation
			uid: rawData.uid || crypto.randomUUID(),
			{{range .Params}}{{.Name}}: rawData.{{.Name | snakeCase }},
			{{end}}
		}
	}

	private _transformToJson(data: {{.Name | title}}Data & { uid: string }): any {
		// TODO: Check the types on this ToJson transformation
		return {
			uid: data.uid,
			{{range .Params}}{{.Name | snakeCase }}: data.{{ .Name }},
			{{end}}
		};
	}
}
	`
)
